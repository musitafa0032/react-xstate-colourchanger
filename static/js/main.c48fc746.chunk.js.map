{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","grammar2","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","actions","assign","context","query","recResult","target","prompt","entry","ENDSPEECH","ask","invoke","id","src","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","cond","onError","who","nomatch","wholeday","notime","whattime","withtime","Finished","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.c48fc746.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n\t\"Chris\": { person: \"Chris Thomas\" },\n\t\"Grace\": {person: \"Grace Jane\"},\n    \"on Friday\": { day: \"Friday\" },\n\t\"on Monday\": { day: \"Monday\" },\n\t\"at8\": {time: \"eight o'clock\" },\n\t\"at eight\": { time: \"eight o'clcok\" },\n\t\"at10\":{time:\"ten o'clcok\" },\n    \"at ten\": { time: \"ten o'clcok\" },\n\t\"at7\": {time: \"seven o'clock\"},\n    \"at seven\": {time: \"seven o'clock\"},\n\t\"at11\": {time: \"eleven o'clock\"},\n    \"at eleven\": {time: \"eleven o'clock\"}\n}\n\nconst grammar2= { \"yes\": true,\n                  \"Yes\": true,\n\t\t\t\t  \"Of course\": true,\n                  \"of course\": true, \n\t\t\t\t  \"No\": false,\n\t\t\t\t  \"no\" : false,\n\t\t\t\t  \"No way\": false,\n\t\t\t\t  \"no way\" : false\n}\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://appointment-ds.herokuapp.com/model/parse'\nconst nluRequest = (query: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${query}\"}`\n    }))\n        .then(data => data.json());\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { \n\t\t\t\tRECOGNISED: [{\n                    actions: assign((context) => { return { query: context.recResult } }),\n                    target: \"query\"\n                }\n               ]\n\t\t\t},\n            states: {\n                prompt: { entry: say(\"What would you like to do?\"), \n                          on: { ENDSPEECH: \"ask\"}\n\t\t\t},\n\t\t\task: {\n\t\t\t\tentry:listen() \n\t\t\t}\n\t\t}\n\t},\n\tquery: { \n\t\tinvoke: {\n        id: \"rasa\",\n        src: (context) => nluRequest(context.query),\n        onDone: [\n\t\t\t{cond: (context) => context === \"Appointment\",\n\t\t\ttarget: \"who\"},\n\t\t\t{target: \"welcomemessage\"}\n\t\t],\n        onError: {\n          target: 'welcome',\n         }\n        }\n      },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n\t            RECOGNISED: [{\n\t                cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n\t\t            actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n\t\t            target: \"wholeday\"\n\n\t\t        },\t\n\t\t        { target: \".nomatch\" }]\n\t        },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t            entry: listen()\n\t            },\n\t\t        nomatch: {\n\t\t            entry: say(\"Sorry I don't know which day are you talking about\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\t     \n            }\n        },\n\t    wholeday: {\n\t\t        initial: \"prompt\",\n\t\t        on: {\n\t                RECOGNISED: [{\n\t\t\t            cond: (context) => grammar2[context.recResult] === true,\n                        target: \"notime\"},\n\t\t\t\t\t\t{\n\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\t\ttarget: \"whattime\"\n\n\t\t            },\n\t                { target: \".nomatch\" }]\n\t\t        },\n\t\t        states: {\n\t\t            prompt: {\n\t\t\t            entry: send((context) => ({\n\t\t\t                type: \"SPEAK\",\n\t\t\t\t\t\t    value: `Good.on ${context.day}. Will it take the whole day?`\n\t\t\t            })),\n\t\t\t            on: { ENDSPEECH: \"ask\" }\n\t\t            },\n\t\t            ask: {\n\t\t                entry: listen()\n\t\t            },\n\t\t            nomatch: {\n\t\t\t            entry: say(\"Please repeat it again\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t            }\n\t\t        }\t     \n            },\n            notime: {\n\t\t           initial: \"prompt\",\n\t               on: {\n\t\t               RECOGNISED: [{ \n\t\t\t               cond: (context) => grammar2[context.recResult] === true,\n\t\t\t               target: \"Finished\"},\n\t\t\t\t\t\t   {\n\t\t\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n                           target: \"who\"\n\t\t\t\t\t\t   \n\t\t                },\n\t\t                { target: \".nomatch\" }]\n\t\t            },\n\t\t            states: {\n\t\t                prompt: {\n\t\t\t                entry: send((context) => ({\n\t\t\t                    type: \"SPEAK\",\n\t\t\t\t\t\t\t\tvalue: `Good. Do you want to me create an appointment with ${context.person} on ${context.day}for the whole day?`\n                            })),\n                            on: { ENDSPEECH: \"ask\" }\n\t\t                },\n\t\t                ask: {\n\t\t\t                entry: listen()\n\t\t                },\n\t\t                nomatch: {\n\t\t\t                entry: say(\"Please repeat it again\"),\n\t\t\t                on: { ENDSPEECH: \"prompt\" }\n\t\t                }\n                    }\n\t            },\n\t\t\t\twhattime: {\n\t\t\t\t\tinitial: \"prompt\",\n\t\t\t\t\ton: {\n\t\t\t\t\t\tRECOGNISED: [{\n\t\t\t\t\t\t\tcond: (context) => \"time\" in (grammar[context.recResult] || {}),\n\t\t\t\t\t\t\tactions: assign((context) => { return { time: grammar[context.recResult].time } }),\n\t\t\t\t\t\t\ttarget: \"withtime\"\n\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ target: \".nomatch\" }]\n\t\t\t\t\t},\n\t\t\t\t\tstates: {\n\t\t\t\t\t\tprompt: { entry: say(\"What time is your meeting\"),\n\t\t\t\t\t\ton: { ENDSPEECH: \"ask\" }\n\t\t\t\t\t},\n\t\t\t\t\task: {\n\t\t\t\t\t\tentry: listen()\n\t\t\t\t},\n\t\t\t\tnomatch: {\n\t\t\t\t\tentry: say(\"Please repeat it again\"),\n\t\t\t\t\ton: { ENDSPEECH: \"prompt\" }\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\twithtime: {\n\t\t\tinitial: \"prompt\",\n\t\t\ton: {\n\t\t\t\tRECOGNISED: [{ \n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === true,\n\t\t\t\t\ttarget: \"Finished\"},\n\t\t\t\t\t{\n\t\t\t\t\tcond: (context) => grammar2[context.recResult] === false,\n\t\t\t\t\ttarget: \"who\"\n\n\t\t\t\t },\n\t\t\t\t { target: \".nomatch\" }]\n\t\t\t },\n\t\t\t states: {\n\t\t\t\t prompt: {\n\t\t\t\t\t entry: send((context) => ({\n\t\t\t\t\t\t type: \"SPEAK\",\n\t\t\t\t\t\t value: `Good. Do you want to me create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n\t\t\t\t\t })),\n\t\t\t\t\t on: { ENDSPEECH: \"ask\" }\n\t\t\t\t },\n\t\t\t\t ask: {\n\t\t\t\t\t entry: listen()\n\t\t\t\t },\n\t\t\t\t nomatch: {\n\t\t\t\t\t entry: say(\"Please repeat it again\"),\n\t\t\t\t\t on: { ENDSPEECH: \"prompt\" }\n\t\t\t\t }\n\t\t\t }\n\t\t},\n                Finished: {\n\t\t                 initial: \"prompt\",\n\t\t                 on: { ENDSPEECH: \"init\" },\n\t\t                 states: {\n\t\t\t                 prompt: { entry: say(\"Your appointment has been created!\")\n\t\t                    },\n\t                    }\n\t                }\t    \n                }\n            })\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t    initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t},\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://appointment-ds.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}